{"ast":null,"code":"import { catchError, map, switchMap } from 'rxjs/operators';\nimport { Client } from \"github.com/rubenv/opencagedata\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:8080/api';\n      this.openCageApiKey = '89d5a7e1287b40b9b8418e3e7775e054';\n      this.client = new Client({\n        apiKey: this.openCageApiKey\n      });\n    }\n    register(user) {\n      return this.http.post(`${this.apiUrl}/register`, user).pipe(switchMap(response => {\n        console.log('Making geocode call...');\n        return this.geocode(`${user.city}, ${user.state}, ${user.country}`).pipe(map(geometry => {\n          response.latitude = geometry.lat;\n          response.longitude = geometry.lng;\n          return response;\n        }), catchError(error => {\n          console.log('Geocode failed:', error.message);\n          return [response];\n        }));\n      }));\n    }\n    geocode(query) {\n      return this.client.geocode({\n        q: query\n      }).pipe(map(response => {\n        if (response.results && response.results.length > 0) {\n          return response.results[0].geometry;\n        }\n        throw new Error('No results found');\n      }));\n    }\n  }\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}