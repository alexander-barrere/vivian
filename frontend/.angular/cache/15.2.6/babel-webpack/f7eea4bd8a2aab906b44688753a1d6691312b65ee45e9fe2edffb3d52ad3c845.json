{"ast":null,"code":"!function (t, e) {\n  \"object\" == typeof exports && \"object\" == typeof module ? module.exports = e() : \"function\" == typeof define && define.amd ? define([], e) : \"object\" == typeof exports ? exports.opencage = e() : t.opencage = e();\n}(self, function () {\n  return t = {\n    98: function (t, e) {\n      var r = \"undefined\" != typeof self ? self : this,\n        o = function () {\n          function t() {\n            this.fetch = !1, this.DOMException = r.DOMException;\n          }\n          return t.prototype = r, new t();\n        }();\n      !function (t) {\n        !function (e) {\n          var r = (\"URLSearchParams\" in t),\n            o = \"Symbol\" in t && \"iterator\" in Symbol,\n            n = \"FileReader\" in t && \"Blob\" in t && function () {\n              try {\n                return new Blob(), !0;\n              } catch (t) {\n                return !1;\n              }\n            }(),\n            s = (\"FormData\" in t),\n            i = (\"ArrayBuffer\" in t);\n          if (i) var a = [\"[object Int8Array]\", \"[object Uint8Array]\", \"[object Uint8ClampedArray]\", \"[object Int16Array]\", \"[object Uint16Array]\", \"[object Int32Array]\", \"[object Uint32Array]\", \"[object Float32Array]\", \"[object Float64Array]\"],\n            u = ArrayBuffer.isView || function (t) {\n              return t && a.indexOf(Object.prototype.toString.call(t)) > -1;\n            };\n          function h(t) {\n            if (\"string\" != typeof t && (t = String(t)), /[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(t)) throw new TypeError(\"Invalid character in header field name\");\n            return t.toLowerCase();\n          }\n          function p(t) {\n            return \"string\" != typeof t && (t = String(t)), t;\n          }\n          function f(t) {\n            var e = {\n              next: function () {\n                var e = t.shift();\n                return {\n                  done: void 0 === e,\n                  value: e\n                };\n              }\n            };\n            return o && (e[Symbol.iterator] = function () {\n              return e;\n            }), e;\n          }\n          function c(t) {\n            this.map = {}, t instanceof c ? t.forEach(function (t, e) {\n              this.append(e, t);\n            }, this) : Array.isArray(t) ? t.forEach(function (t) {\n              this.append(t[0], t[1]);\n            }, this) : t && Object.getOwnPropertyNames(t).forEach(function (e) {\n              this.append(e, t[e]);\n            }, this);\n          }\n          function d(t) {\n            if (t.bodyUsed) return Promise.reject(new TypeError(\"Already read\"));\n            t.bodyUsed = !0;\n          }\n          function y(t) {\n            return new Promise(function (e, r) {\n              t.onload = function () {\n                e(t.result);\n              }, t.onerror = function () {\n                r(t.error);\n              };\n            });\n          }\n          function l(t) {\n            var e = new FileReader(),\n              r = y(e);\n            return e.readAsArrayBuffer(t), r;\n          }\n          function b(t) {\n            if (t.slice) return t.slice(0);\n            var e = new Uint8Array(t.byteLength);\n            return e.set(new Uint8Array(t)), e.buffer;\n          }\n          function m() {\n            return this.bodyUsed = !1, this._initBody = function (t) {\n              var e;\n              this._bodyInit = t, t ? \"string\" == typeof t ? this._bodyText = t : n && Blob.prototype.isPrototypeOf(t) ? this._bodyBlob = t : s && FormData.prototype.isPrototypeOf(t) ? this._bodyFormData = t : r && URLSearchParams.prototype.isPrototypeOf(t) ? this._bodyText = t.toString() : i && n && (e = t) && DataView.prototype.isPrototypeOf(e) ? (this._bodyArrayBuffer = b(t.buffer), this._bodyInit = new Blob([this._bodyArrayBuffer])) : i && (ArrayBuffer.prototype.isPrototypeOf(t) || u(t)) ? this._bodyArrayBuffer = b(t) : this._bodyText = t = Object.prototype.toString.call(t) : this._bodyText = \"\", this.headers.get(\"content-type\") || (\"string\" == typeof t ? this.headers.set(\"content-type\", \"text/plain;charset=UTF-8\") : this._bodyBlob && this._bodyBlob.type ? this.headers.set(\"content-type\", this._bodyBlob.type) : r && URLSearchParams.prototype.isPrototypeOf(t) && this.headers.set(\"content-type\", \"application/x-www-form-urlencoded;charset=UTF-8\"));\n            }, n && (this.blob = function () {\n              var t = d(this);\n              if (t) return t;\n              if (this._bodyBlob) return Promise.resolve(this._bodyBlob);\n              if (this._bodyArrayBuffer) return Promise.resolve(new Blob([this._bodyArrayBuffer]));\n              if (this._bodyFormData) throw new Error(\"could not read FormData body as blob\");\n              return Promise.resolve(new Blob([this._bodyText]));\n            }, this.arrayBuffer = function () {\n              return this._bodyArrayBuffer ? d(this) || Promise.resolve(this._bodyArrayBuffer) : this.blob().then(l);\n            }), this.text = function () {\n              var t,\n                e,\n                r,\n                o = d(this);\n              if (o) return o;\n              if (this._bodyBlob) return t = this._bodyBlob, r = y(e = new FileReader()), e.readAsText(t), r;\n              if (this._bodyArrayBuffer) return Promise.resolve(function (t) {\n                for (var e = new Uint8Array(t), r = new Array(e.length), o = 0; o < e.length; o++) r[o] = String.fromCharCode(e[o]);\n                return r.join(\"\");\n              }(this._bodyArrayBuffer));\n              if (this._bodyFormData) throw new Error(\"could not read FormData body as text\");\n              return Promise.resolve(this._bodyText);\n            }, s && (this.formData = function () {\n              return this.text().then(E);\n            }), this.json = function () {\n              return this.text().then(JSON.parse);\n            }, this;\n          }\n          c.prototype.append = function (t, e) {\n            t = h(t), e = p(e);\n            var r = this.map[t];\n            this.map[t] = r ? r + \", \" + e : e;\n          }, c.prototype.delete = function (t) {\n            delete this.map[h(t)];\n          }, c.prototype.get = function (t) {\n            return t = h(t), this.has(t) ? this.map[t] : null;\n          }, c.prototype.has = function (t) {\n            return this.map.hasOwnProperty(h(t));\n          }, c.prototype.set = function (t, e) {\n            this.map[h(t)] = p(e);\n          }, c.prototype.forEach = function (t, e) {\n            for (var r in this.map) this.map.hasOwnProperty(r) && t.call(e, this.map[r], r, this);\n          }, c.prototype.keys = function () {\n            var t = [];\n            return this.forEach(function (e, r) {\n              t.push(r);\n            }), f(t);\n          }, c.prototype.values = function () {\n            var t = [];\n            return this.forEach(function (e) {\n              t.push(e);\n            }), f(t);\n          }, c.prototype.entries = function () {\n            var t = [];\n            return this.forEach(function (e, r) {\n              t.push([r, e]);\n            }), f(t);\n          }, o && (c.prototype[Symbol.iterator] = c.prototype.entries);\n          var w = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"POST\", \"PUT\"];\n          function x(t, e) {\n            var r,\n              o,\n              n = (e = e || {}).body;\n            if (t instanceof x) {\n              if (t.bodyUsed) throw new TypeError(\"Already read\");\n              this.url = t.url, this.credentials = t.credentials, e.headers || (this.headers = new c(t.headers)), this.method = t.method, this.mode = t.mode, this.signal = t.signal, n || null == t._bodyInit || (n = t._bodyInit, t.bodyUsed = !0);\n            } else this.url = String(t);\n            if (this.credentials = e.credentials || this.credentials || \"same-origin\", !e.headers && this.headers || (this.headers = new c(e.headers)), this.method = (o = (r = e.method || this.method || \"GET\").toUpperCase(), w.indexOf(o) > -1 ? o : r), this.mode = e.mode || this.mode || null, this.signal = e.signal || this.signal, this.referrer = null, (\"GET\" === this.method || \"HEAD\" === this.method) && n) throw new TypeError(\"Body not allowed for GET or HEAD requests\");\n            this._initBody(n);\n          }\n          function E(t) {\n            var e = new FormData();\n            return t.trim().split(\"&\").forEach(function (t) {\n              if (t) {\n                var r = t.split(\"=\"),\n                  o = r.shift().replace(/\\+/g, \" \"),\n                  n = r.join(\"=\").replace(/\\+/g, \" \");\n                e.append(decodeURIComponent(o), decodeURIComponent(n));\n              }\n            }), e;\n          }\n          function v(t, e) {\n            e || (e = {}), this.type = \"default\", this.status = void 0 === e.status ? 200 : e.status, this.ok = this.status >= 200 && this.status < 300, this.statusText = \"statusText\" in e ? e.statusText : \"OK\", this.headers = new c(e.headers), this.url = e.url || \"\", this._initBody(t);\n          }\n          x.prototype.clone = function () {\n            return new x(this, {\n              body: this._bodyInit\n            });\n          }, m.call(x.prototype), m.call(v.prototype), v.prototype.clone = function () {\n            return new v(this._bodyInit, {\n              status: this.status,\n              statusText: this.statusText,\n              headers: new c(this.headers),\n              url: this.url\n            });\n          }, v.error = function () {\n            var t = new v(null, {\n              status: 0,\n              statusText: \"\"\n            });\n            return t.type = \"error\", t;\n          };\n          var g = [301, 302, 303, 307, 308];\n          v.redirect = function (t, e) {\n            if (-1 === g.indexOf(e)) throw new RangeError(\"Invalid status code\");\n            return new v(null, {\n              status: e,\n              headers: {\n                location: t\n              }\n            });\n          }, e.DOMException = t.DOMException;\n          try {\n            new e.DOMException();\n          } catch (t) {\n            e.DOMException = function (t, e) {\n              this.message = t, this.name = e;\n              var r = Error(t);\n              this.stack = r.stack;\n            }, e.DOMException.prototype = Object.create(Error.prototype), e.DOMException.prototype.constructor = e.DOMException;\n          }\n          function A(t, r) {\n            return new Promise(function (o, s) {\n              var i = new x(t, r);\n              if (i.signal && i.signal.aborted) return s(new e.DOMException(\"Aborted\", \"AbortError\"));\n              var a = new XMLHttpRequest();\n              function u() {\n                a.abort();\n              }\n              a.onload = function () {\n                var t,\n                  e,\n                  r = {\n                    status: a.status,\n                    statusText: a.statusText,\n                    headers: (t = a.getAllResponseHeaders() || \"\", e = new c(), t.replace(/\\r?\\n[\\t ]+/g, \" \").split(/\\r?\\n/).forEach(function (t) {\n                      var r = t.split(\":\"),\n                        o = r.shift().trim();\n                      if (o) {\n                        var n = r.join(\":\").trim();\n                        e.append(o, n);\n                      }\n                    }), e)\n                  };\n                r.url = \"responseURL\" in a ? a.responseURL : r.headers.get(\"X-Request-URL\");\n                var n = \"response\" in a ? a.response : a.responseText;\n                o(new v(n, r));\n              }, a.onerror = function () {\n                s(new TypeError(\"Network request failed\"));\n              }, a.ontimeout = function () {\n                s(new TypeError(\"Network request failed\"));\n              }, a.onabort = function () {\n                s(new e.DOMException(\"Aborted\", \"AbortError\"));\n              }, a.open(i.method, i.url, !0), \"include\" === i.credentials ? a.withCredentials = !0 : \"omit\" === i.credentials && (a.withCredentials = !1), \"responseType\" in a && n && (a.responseType = \"blob\"), i.headers.forEach(function (t, e) {\n                a.setRequestHeader(e, t);\n              }), i.signal && (i.signal.addEventListener(\"abort\", u), a.onreadystatechange = function () {\n                4 === a.readyState && i.signal.removeEventListener(\"abort\", u);\n              }), a.send(void 0 === i._bodyInit ? null : i._bodyInit);\n            });\n          }\n          A.polyfill = !0, t.fetch || (t.fetch = A, t.Headers = c, t.Request = x, t.Response = v), e.Headers = c, e.Request = x, e.Response = v, e.fetch = A, Object.defineProperty(e, \"__esModule\", {\n            value: !0\n          });\n        }({});\n      }(o), o.fetch.ponyfill = !0, delete o.fetch.polyfill;\n      var n = o;\n      (e = n.fetch).default = n.fetch, e.fetch = n.fetch, e.Headers = n.Headers, e.Request = n.Request, e.Response = n.Response, t.exports = e;\n    },\n    171: t => {\n      t.exports = (t, e) => {\n        const r = new Error(e),\n          o = {\n            code: t,\n            message: e\n          };\n        return r.response = {\n          status: o\n        }, r;\n      };\n    },\n    526: (t, e, r) => {\n      const o = r(98),\n        n = t => {\n          if (t.status >= 200 && t.status < 300) return t;\n          const e = new Error(t.statusText);\n          throw e.status = {\n            code: t.status,\n            message: t.statusText\n          }, e;\n        },\n        s = t => t.json(),\n        i = t => o(t);\n      t.exports = (t, e, r) => {\n        i(t).then(n).then(s).then(t => {\n          e(t);\n        }).catch(t => {\n          r(t);\n        });\n      }, t.exports.fetchUrl = i, t.exports.parseJSON = s, t.exports.checkStatus = n;\n    },\n    616: (t, e, r) => {\n      const o = r(225),\n        n = r(231),\n        s = r(526),\n        i = r(171);\n      t.exports = t => new Promise((e, r) => {\n        if (o.isUndefinedOrNull(t)) return r(i(400, \"missing or bad query\"));\n        const a = (t => {\n          const e = {\n            ...t\n          };\n          let r = \"https://api.opencagedata.com/geocode/v1/json\",\n            n = !1;\n          return o.isUndefinedOrEmpty(t.proxyURL) ? (o.isUndefinedOrEmpty(t.key) && (e.key = process.env.OPENCAGE_API_KEY || process.env.OCD_API_KEY), o.isUndefinedOrEmpty(e.key) && (n = !0)) : (r = t.proxyURL, delete e.proxyURL), {\n            missingKey: n,\n            endpoint: r,\n            query: e\n          };\n        })(t);\n        if (a.missingKey) return r(i(401, \"missing API key\"));\n        const {\n            query: u,\n            endpoint: h\n          } = a,\n          p = n(u);\n        return s(`${h}?${p}`, e, r);\n      });\n    },\n    225: t => {\n      t.exports = {\n        isNumber: t => \"number\" == typeof t && !Number.isNaN(t),\n        isArray: t => !!t && Array.isArray(t),\n        isUndefinedOrEmpty: t => void 0 === t || \"\" === t,\n        isUndefinedOrNull: t => null == t\n      };\n    },\n    138: (t, e, r) => {\n      const o = r(616);\n      t.exports = {\n        geocode: o\n      };\n    },\n    231: (t, e, r) => {\n      const o = r(225);\n      t.exports = t => o.isUndefinedOrNull(t) ? \"\" : Object.keys(t).map(e => `${encodeURIComponent(e)}=${encodeURIComponent(t[e])}`).join(\"&\");\n    }\n  }, e = {}, function r(o) {\n    var n = e[o];\n    if (void 0 !== n) return n.exports;\n    var s = e[o] = {\n      exports: {}\n    };\n    return t[o].call(s.exports, s, s.exports, r), s.exports;\n  }(138);\n  var t, e;\n});\n//# sourceMappingURL=opencage-api.min.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}